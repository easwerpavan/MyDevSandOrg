public class databasemethods {
    /* public static void database(){
list<account>acclist = new list<account>();
for(integer count = 1;count<=3 ; count++){
account acc = new account();
acc.AccountNumber = 'city bank'+count;
acc.Rating = 'WARM';
acc.SLAExpirationDate__c = system.today();
acc.SLA__c = 'DATA438';
if(count != 3){
acc.name = 'DATA 260' + count;
}
acclist.add(acc);
}
if(!acclist.isempty()){
DATABASE.SAVERESULT[] results =  database.insert(acclist,false); // allow the partial process.   
FOR(database.SaveResult res : results){
if(res.issuccess()){
system.debug('record inserted successfully');
system.debug('the record id is: '+res.getid());
} else{
for(database.Error resu : res.geterrors()){
system.debug('the error msg is :'+resu.getmessage());
system.debug('the statuscode is :'+resu.getStatusCode());
system.debug('the filed is :'+resu.getFields());
}
}
system.debug('*****************************************');
}
}
} */
    
    /*  public static void candidatedatabase(){
Account a =[SELECT id,Name from Account LIMIT 1];

list<candidates__c>canlist = new list<candidates__c>();
for(integer count=1;count<=3;count++){
candidates__c  can = new candidates__c();
can.Account__c = A.ID ;
can.EXPERIENCE__c = 5;
can.QUALIFICATION_COLURSE__c ='aws';
can.INTER_STATUS__c = 'SUBMITTED';
if(count!=2){
can.Name = 'cand data'+count;     
}
canlist.add(can);
}
database.SaveResult [] results = database.insert(canlist, false);
for(database.SaveResult res : results){
if(res.isSuccess()){
system.debug('the record is inserted successfully');
system.debug('the record id is :'+res.getId());
}else {
for(database.Error err : res.geterrors()){
system.debug('the error msg is '+err.getmessage());
system.debug('the affected filed is '+err.getFields());
system.debug('the status code is '+err.getStatusCode()); 
}      
}
system.debug('________________________________');
}
}
*/
    
    /* database class provides various methods to perform the dml operation as below. 
* DATABASE.INSERT();
* DATABASE.UPDATE();
* DATABASE.DELETE();
* DATABASE.UNDELETE();
* DATABASE.UPSERT();
* DATABASE.MERGE();
* DATABASEW.EMPTYRECYCLEBIN();
* SYNTAX FOR INSERT:::::
* ================
*       DATABASE.INSERT(<COOLECTION OBJECT NAME> ,BOOLEAN <ALL OR NOTHING>);
* TRUE ::: IT WIL MAINTAIN THE TRANSACTIONS.(I.E,IT WILL WORK AS THE INSERT  STATEMENT).
* FALSE::: IT WILL ALLOW THE PARTIAL PROCESSING.
* TO STORE / SAVE THE RECORDS.
*     -----------
*======= DATABASE.SAVERESULT[] SYNTAX FOR TO STORE SINGLE RECORD..
*         ====  DATABASE.SAVERESULT[] <OBJECTNAME>= DATABASE.INSERT(<COOLECTION OBJECT NAME> ,BOOLEAN <ALL OR NOTHING>);
* THE ABOVE SYNTAX USED TO STORE MULTIPLE RECORDS.   



*******1. DATABASE.SAVERESULT CLASS::::::::::
* ===================
* * METHODS::::
* ---------------
*   1 BOOLEAN ISSUCCESS();
* IT RETIURNS TRUE IF THE OPERASTION IS SUCCESS PROCCESED.ELSE TI IS FALES.
*    2 GETID();
* USED TO GENERATE THE RECORD ID WHICH HAS BEEN GENERATED BY SALESFORCE UPON INSERTIN.
*    3 GETERRORS();
* IT RETURNS THE ERROR MSGS WHICH HAS BEEEN RAISED BY SALESFORCE ,IF THE RECORD HAS BEEN FAILED.



********2. DATABASE.ERROR CLASS::::
* ---------------------
*        BY USNG THIS CLASS WE CAN TRACK ALL THE ERRORS INFORMATION,WHEN THE RECORD IS FALED..
* METHODS:
* ========
* 1.GETMESSAGE();---> IT RETURNS THE ERROR  MSG.
* 2.GETSTATUSCODE();--->IT RETURNS THE STATUS CODE OF THE ERROR.(EX: REQUORED_FILED_MISSING,ETCC,,)
* 3.GETFILEDS();--->IT RETURNS ALL AFFECTED FILEDS DUE TO THE OPERATION FILED.
*/
    
}